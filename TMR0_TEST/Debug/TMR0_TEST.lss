
TMR0_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000da2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00000e16  2**0
                  ALLOC
  2 .stab         00000e7c  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000066f  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_10>
  2c:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ac 06 	call	0xd58	; 0xd58 <main>
  74:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:
/* MCAL */
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_setPinDirection+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_setPinDirection+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02
  8e:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && ((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_setPinDirection+0x1c>
  96:	dc c0       	rjmp	.+440    	; 0x250 <DIO_setPinDirection+0x1d4>
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_setPinDirection+0x24>
  9e:	d8 c0       	rjmp	.+432    	; 0x250 <DIO_setPinDirection+0x1d4>
  a0:	8b 81       	ldd	r24, Y+3	; 0x03
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	21 f0       	breq	.+8      	; 0xae <DIO_setPinDirection+0x32>
  a6:	8b 81       	ldd	r24, Y+3	; 0x03
  a8:	88 23       	and	r24, r24
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_setPinDirection+0x32>
  ac:	d1 c0       	rjmp	.+418    	; 0x250 <DIO_setPinDirection+0x1d4>
	{
		switch(PortId)
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	3d 83       	std	Y+5, r19	; 0x05
  b6:	2c 83       	std	Y+4, r18	; 0x04
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	91 05       	cpc	r25, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_setPinDirection+0x48>
  c2:	43 c0       	rjmp	.+134    	; 0x14a <DIO_setPinDirection+0xce>
  c4:	2c 81       	ldd	r18, Y+4	; 0x04
  c6:	3d 81       	ldd	r19, Y+5	; 0x05
  c8:	22 30       	cpi	r18, 0x02	; 2
  ca:	31 05       	cpc	r19, r1
  cc:	2c f4       	brge	.+10     	; 0xd8 <DIO_setPinDirection+0x5c>
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	9d 81       	ldd	r25, Y+5	; 0x05
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	71 f0       	breq	.+28     	; 0xf2 <DIO_setPinDirection+0x76>
  d6:	bc c0       	rjmp	.+376    	; 0x250 <DIO_setPinDirection+0x1d4>
  d8:	2c 81       	ldd	r18, Y+4	; 0x04
  da:	3d 81       	ldd	r19, Y+5	; 0x05
  dc:	22 30       	cpi	r18, 0x02	; 2
  de:	31 05       	cpc	r19, r1
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_setPinDirection+0x68>
  e2:	5f c0       	rjmp	.+190    	; 0x1a2 <DIO_setPinDirection+0x126>
  e4:	8c 81       	ldd	r24, Y+4	; 0x04
  e6:	9d 81       	ldd	r25, Y+5	; 0x05
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	91 05       	cpc	r25, r1
  ec:	09 f4       	brne	.+2      	; 0xf0 <DIO_setPinDirection+0x74>
  ee:	85 c0       	rjmp	.+266    	; 0x1fa <DIO_setPinDirection+0x17e>
  f0:	af c0       	rjmp	.+350    	; 0x250 <DIO_setPinDirection+0x1d4>
	    {
	    	case DIO_PORTA: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	a1 f4       	brne	.+40     	; 0x120 <DIO_setPinDirection+0xa4>
	    	{
	    		SET_BIT(DDRA,PinId);
  f8:	aa e3       	ldi	r26, 0x3A	; 58
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	ea e3       	ldi	r30, 0x3A	; 58
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_setPinDirection+0x9a>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_setPinDirection+0x96>
 11a:	84 2b       	or	r24, r20
 11c:	8c 93       	st	X, r24
 11e:	98 c0       	rjmp	.+304    	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRA,PinId);
 120:	aa e3       	ldi	r26, 0x3A	; 58
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	ea e3       	ldi	r30, 0x3A	; 58
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	48 2f       	mov	r20, r24
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_setPinDirection+0xc2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_setPinDirection+0xbe>
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	8c 93       	st	X, r24
 148:	83 c0       	rjmp	.+262    	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTB: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	a1 f4       	brne	.+40     	; 0x178 <DIO_setPinDirection+0xfc>
	    	{
	    		SET_BIT(DDRB,PinId);
 150:	a7 e3       	ldi	r26, 0x37	; 55
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e7 e3       	ldi	r30, 0x37	; 55
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 2e       	mov	r0, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_setPinDirection+0xf2>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_setPinDirection+0xee>
 172:	84 2b       	or	r24, r20
 174:	8c 93       	st	X, r24
 176:	6c c0       	rjmp	.+216    	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRB,PinId);
 178:	a7 e3       	ldi	r26, 0x37	; 55
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e7 e3       	ldi	r30, 0x37	; 55
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	48 2f       	mov	r20, r24
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 2e       	mov	r0, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_setPinDirection+0x11a>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_setPinDirection+0x116>
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	57 c0       	rjmp	.+174    	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTC: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	a1 f4       	brne	.+40     	; 0x1d0 <DIO_setPinDirection+0x154>
	    	{
	    		SET_BIT(DDRC,PinId);
 1a8:	a4 e3       	ldi	r26, 0x34	; 52
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	e4 e3       	ldi	r30, 0x34	; 52
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	48 2f       	mov	r20, r24
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 2e       	mov	r0, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_setPinDirection+0x14a>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_setPinDirection+0x146>
 1ca:	84 2b       	or	r24, r20
 1cc:	8c 93       	st	X, r24
 1ce:	40 c0       	rjmp	.+128    	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRC,PinId);
 1d0:	a4 e3       	ldi	r26, 0x34	; 52
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	e4 e3       	ldi	r30, 0x34	; 52
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	48 2f       	mov	r20, r24
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	28 2f       	mov	r18, r24
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 2e       	mov	r0, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_setPinDirection+0x172>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_setPinDirection+0x16e>
 1f2:	80 95       	com	r24
 1f4:	84 23       	and	r24, r20
 1f6:	8c 93       	st	X, r24
 1f8:	2b c0       	rjmp	.+86     	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTD: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	a1 f4       	brne	.+40     	; 0x228 <DIO_setPinDirection+0x1ac>
	    	{
	    		SET_BIT(DDRD,PinId);
 200:	a1 e3       	ldi	r26, 0x31	; 49
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e1 e3       	ldi	r30, 0x31	; 49
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_setPinDirection+0x1a2>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_setPinDirection+0x19e>
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
 226:	14 c0       	rjmp	.+40     	; 0x250 <DIO_setPinDirection+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRD,PinId);
 228:	a1 e3       	ldi	r26, 0x31	; 49
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e1 e3       	ldi	r30, 0x31	; 49
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_setPinDirection+0x1ca>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_setPinDirection+0x1c6>
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <DIO_setPinValue>:


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	00 d0       	rcall	.+0      	; 0x266 <DIO_setPinValue+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <DIO_setPinValue+0x8>
 268:	0f 92       	push	r0
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	6a 83       	std	Y+2, r22	; 0x02
 272:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	08 f0       	brcs	.+2      	; 0x27c <DIO_setPinValue+0x1c>
 27a:	dc c0       	rjmp	.+440    	; 0x434 <DIO_setPinValue+0x1d4>
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	08 f0       	brcs	.+2      	; 0x284 <DIO_setPinValue+0x24>
 282:	d8 c0       	rjmp	.+432    	; 0x434 <DIO_setPinValue+0x1d4>
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	21 f0       	breq	.+8      	; 0x292 <DIO_setPinValue+0x32>
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	88 23       	and	r24, r24
 28e:	09 f0       	breq	.+2      	; 0x292 <DIO_setPinValue+0x32>
 290:	d1 c0       	rjmp	.+418    	; 0x434 <DIO_setPinValue+0x1d4>
	{
		switch(PortId)
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	3d 83       	std	Y+5, r19	; 0x05
 29a:	2c 83       	std	Y+4, r18	; 0x04
 29c:	8c 81       	ldd	r24, Y+4	; 0x04
 29e:	9d 81       	ldd	r25, Y+5	; 0x05
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	91 05       	cpc	r25, r1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DIO_setPinValue+0x48>
 2a6:	43 c0       	rjmp	.+134    	; 0x32e <DIO_setPinValue+0xce>
 2a8:	2c 81       	ldd	r18, Y+4	; 0x04
 2aa:	3d 81       	ldd	r19, Y+5	; 0x05
 2ac:	22 30       	cpi	r18, 0x02	; 2
 2ae:	31 05       	cpc	r19, r1
 2b0:	2c f4       	brge	.+10     	; 0x2bc <DIO_setPinValue+0x5c>
 2b2:	8c 81       	ldd	r24, Y+4	; 0x04
 2b4:	9d 81       	ldd	r25, Y+5	; 0x05
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	71 f0       	breq	.+28     	; 0x2d6 <DIO_setPinValue+0x76>
 2ba:	bc c0       	rjmp	.+376    	; 0x434 <DIO_setPinValue+0x1d4>
 2bc:	2c 81       	ldd	r18, Y+4	; 0x04
 2be:	3d 81       	ldd	r19, Y+5	; 0x05
 2c0:	22 30       	cpi	r18, 0x02	; 2
 2c2:	31 05       	cpc	r19, r1
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <DIO_setPinValue+0x68>
 2c6:	5f c0       	rjmp	.+190    	; 0x386 <DIO_setPinValue+0x126>
 2c8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ca:	9d 81       	ldd	r25, Y+5	; 0x05
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	91 05       	cpc	r25, r1
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <DIO_setPinValue+0x74>
 2d2:	85 c0       	rjmp	.+266    	; 0x3de <DIO_setPinValue+0x17e>
 2d4:	af c0       	rjmp	.+350    	; 0x434 <DIO_setPinValue+0x1d4>
	    {
	    	case DIO_PORTA:
	    	if(DIO_PIN_HIGH == PinValue)
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	a1 f4       	brne	.+40     	; 0x304 <DIO_setPinValue+0xa4>
	    	{
	    		SET_BIT(PORTA,PinId);
 2dc:	ab e3       	ldi	r26, 0x3B	; 59
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	eb e3       	ldi	r30, 0x3B	; 59
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_setPinValue+0x9a>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_setPinValue+0x96>
 2fe:	84 2b       	or	r24, r20
 300:	8c 93       	st	X, r24
 302:	98 c0       	rjmp	.+304    	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTA,PinId);
 304:	ab e3       	ldi	r26, 0x3B	; 59
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	eb e3       	ldi	r30, 0x3B	; 59
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_setPinValue+0xc2>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_setPinValue+0xbe>
 326:	80 95       	com	r24
 328:	84 23       	and	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	83 c0       	rjmp	.+262    	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTB:
	    	if(DIO_PIN_HIGH == PinValue)
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	a1 f4       	brne	.+40     	; 0x35c <DIO_setPinValue+0xfc>
	    	{
	    		SET_BIT(PORTB,PinId);
 334:	a8 e3       	ldi	r26, 0x38	; 56
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e8 e3       	ldi	r30, 0x38	; 56
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	48 2f       	mov	r20, r24
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_setPinValue+0xf2>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_setPinValue+0xee>
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	6c c0       	rjmp	.+216    	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTB,PinId);
 35c:	a8 e3       	ldi	r26, 0x38	; 56
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e8 e3       	ldi	r30, 0x38	; 56
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_setPinValue+0x11a>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_setPinValue+0x116>
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	8c 93       	st	X, r24
 384:	57 c0       	rjmp	.+174    	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTC:
	    	if(DIO_PIN_HIGH == PinValue)
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	a1 f4       	brne	.+40     	; 0x3b4 <DIO_setPinValue+0x154>
	    	{
	    		SET_BIT(PORTC,PinId);
 38c:	a5 e3       	ldi	r26, 0x35	; 53
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e5 e3       	ldi	r30, 0x35	; 53
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_setPinValue+0x14a>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_setPinValue+0x146>
 3ae:	84 2b       	or	r24, r20
 3b0:	8c 93       	st	X, r24
 3b2:	40 c0       	rjmp	.+128    	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTC,PinId);
 3b4:	a5 e3       	ldi	r26, 0x35	; 53
 3b6:	b0 e0       	ldi	r27, 0x00	; 0
 3b8:	e5 e3       	ldi	r30, 0x35	; 53
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	48 2f       	mov	r20, r24
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_setPinValue+0x172>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_setPinValue+0x16e>
 3d6:	80 95       	com	r24
 3d8:	84 23       	and	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	2b c0       	rjmp	.+86     	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	break;
	    	
	    	case DIO_PORTD:
	    	if(DIO_PIN_HIGH == PinValue)
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	a1 f4       	brne	.+40     	; 0x40c <DIO_setPinValue+0x1ac>
	    	{
	    		SET_BIT(PORTD,PinId);
 3e4:	a2 e3       	ldi	r26, 0x32	; 50
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	e2 e3       	ldi	r30, 0x32	; 50
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_setPinValue+0x1a2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_setPinValue+0x19e>
 406:	84 2b       	or	r24, r20
 408:	8c 93       	st	X, r24
 40a:	14 c0       	rjmp	.+40     	; 0x434 <DIO_setPinValue+0x1d4>
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTD,PinId);
 40c:	a2 e3       	ldi	r26, 0x32	; 50
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e2 e3       	ldi	r30, 0x32	; 50
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_setPinValue+0x1ca>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_setPinValue+0x1c6>
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	cf 91       	pop	r28
 440:	df 91       	pop	r29
 442:	08 95       	ret

00000444 <DIO_togglePinValue>:


void DIO_togglePinValue(u8 PortId, u8 PinId)
{
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	00 d0       	rcall	.+0      	; 0x44a <DIO_togglePinValue+0x6>
 44a:	00 d0       	rcall	.+0      	; 0x44c <DIO_togglePinValue+0x8>
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	84 30       	cpi	r24, 0x04	; 4
 458:	08 f0       	brcs	.+2      	; 0x45c <DIO_togglePinValue+0x18>
 45a:	72 c0       	rjmp	.+228    	; 0x540 <DIO_togglePinValue+0xfc>
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	08 f0       	brcs	.+2      	; 0x464 <DIO_togglePinValue+0x20>
 462:	6e c0       	rjmp	.+220    	; 0x540 <DIO_togglePinValue+0xfc>
	{
		switch(PortId)
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	3c 83       	std	Y+4, r19	; 0x04
 46c:	2b 83       	std	Y+3, r18	; 0x03
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
 470:	9c 81       	ldd	r25, Y+4	; 0x04
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 05       	cpc	r25, r1
 476:	49 f1       	breq	.+82     	; 0x4ca <DIO_togglePinValue+0x86>
 478:	2b 81       	ldd	r18, Y+3	; 0x03
 47a:	3c 81       	ldd	r19, Y+4	; 0x04
 47c:	22 30       	cpi	r18, 0x02	; 2
 47e:	31 05       	cpc	r19, r1
 480:	2c f4       	brge	.+10     	; 0x48c <DIO_togglePinValue+0x48>
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	9c 81       	ldd	r25, Y+4	; 0x04
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	61 f0       	breq	.+24     	; 0x4a2 <DIO_togglePinValue+0x5e>
 48a:	5a c0       	rjmp	.+180    	; 0x540 <DIO_togglePinValue+0xfc>
 48c:	2b 81       	ldd	r18, Y+3	; 0x03
 48e:	3c 81       	ldd	r19, Y+4	; 0x04
 490:	22 30       	cpi	r18, 0x02	; 2
 492:	31 05       	cpc	r19, r1
 494:	71 f1       	breq	.+92     	; 0x4f2 <DIO_togglePinValue+0xae>
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	9c 81       	ldd	r25, Y+4	; 0x04
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	91 05       	cpc	r25, r1
 49e:	e9 f1       	breq	.+122    	; 0x51a <DIO_togglePinValue+0xd6>
 4a0:	4f c0       	rjmp	.+158    	; 0x540 <DIO_togglePinValue+0xfc>
		{
			case DIO_PORTA:
			TOG_BIT(PORTA,PinId);
 4a2:	ab e3       	ldi	r26, 0x3B	; 59
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	eb e3       	ldi	r30, 0x3B	; 59
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_togglePinValue+0x7c>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_togglePinValue+0x78>
 4c4:	84 27       	eor	r24, r20
 4c6:	8c 93       	st	X, r24
 4c8:	3b c0       	rjmp	.+118    	; 0x540 <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTB:
			TOG_BIT(PORTB,PinId);
 4ca:	a8 e3       	ldi	r26, 0x38	; 56
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	e8 e3       	ldi	r30, 0x38	; 56
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	48 2f       	mov	r20, r24
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 2e       	mov	r0, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_togglePinValue+0xa4>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_togglePinValue+0xa0>
 4ec:	84 27       	eor	r24, r20
 4ee:	8c 93       	st	X, r24
 4f0:	27 c0       	rjmp	.+78     	; 0x540 <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
 4f2:	a5 e3       	ldi	r26, 0x35	; 53
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	e5 e3       	ldi	r30, 0x35	; 53
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	48 2f       	mov	r20, r24
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 2e       	mov	r0, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_togglePinValue+0xcc>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_togglePinValue+0xc8>
 514:	84 27       	eor	r24, r20
 516:	8c 93       	st	X, r24
 518:	13 c0       	rjmp	.+38     	; 0x540 <DIO_togglePinValue+0xfc>
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
 51a:	a2 e3       	ldi	r26, 0x32	; 50
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e2 e3       	ldi	r30, 0x32	; 50
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_togglePinValue+0xf4>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_togglePinValue+0xf0>
 53c:	84 27       	eor	r24, r20
 53e:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <DIO_getPinValue>:


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	00 d0       	rcall	.+0      	; 0x554 <DIO_getPinValue+0x6>
 554:	00 d0       	rcall	.+0      	; 0x556 <DIO_getPinValue+0x8>
 556:	00 d0       	rcall	.+0      	; 0x558 <DIO_getPinValue+0xa>
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	89 83       	std	Y+1, r24	; 0x01
 55e:	6a 83       	std	Y+2, r22	; 0x02
 560:	5c 83       	std	Y+4, r21	; 0x04
 562:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3) && (PinId<=7) && (PinValue!= NULL))
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	84 30       	cpi	r24, 0x04	; 4
 568:	08 f0       	brcs	.+2      	; 0x56c <DIO_getPinValue+0x1e>
 56a:	79 c0       	rjmp	.+242    	; 0x65e <DIO_getPinValue+0x110>
 56c:	8a 81       	ldd	r24, Y+2	; 0x02
 56e:	88 30       	cpi	r24, 0x08	; 8
 570:	08 f0       	brcs	.+2      	; 0x574 <DIO_getPinValue+0x26>
 572:	75 c0       	rjmp	.+234    	; 0x65e <DIO_getPinValue+0x110>
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	9c 81       	ldd	r25, Y+4	; 0x04
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	09 f4       	brne	.+2      	; 0x57e <DIO_getPinValue+0x30>
 57c:	70 c0       	rjmp	.+224    	; 0x65e <DIO_getPinValue+0x110>
	{
		switch(PortId)
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	28 2f       	mov	r18, r24
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	3e 83       	std	Y+6, r19	; 0x06
 586:	2d 83       	std	Y+5, r18	; 0x05
 588:	4d 81       	ldd	r20, Y+5	; 0x05
 58a:	5e 81       	ldd	r21, Y+6	; 0x06
 58c:	41 30       	cpi	r20, 0x01	; 1
 58e:	51 05       	cpc	r21, r1
 590:	59 f1       	breq	.+86     	; 0x5e8 <DIO_getPinValue+0x9a>
 592:	8d 81       	ldd	r24, Y+5	; 0x05
 594:	9e 81       	ldd	r25, Y+6	; 0x06
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	91 05       	cpc	r25, r1
 59a:	34 f4       	brge	.+12     	; 0x5a8 <DIO_getPinValue+0x5a>
 59c:	2d 81       	ldd	r18, Y+5	; 0x05
 59e:	3e 81       	ldd	r19, Y+6	; 0x06
 5a0:	21 15       	cp	r18, r1
 5a2:	31 05       	cpc	r19, r1
 5a4:	69 f0       	breq	.+26     	; 0x5c0 <DIO_getPinValue+0x72>
 5a6:	5b c0       	rjmp	.+182    	; 0x65e <DIO_getPinValue+0x110>
 5a8:	4d 81       	ldd	r20, Y+5	; 0x05
 5aa:	5e 81       	ldd	r21, Y+6	; 0x06
 5ac:	42 30       	cpi	r20, 0x02	; 2
 5ae:	51 05       	cpc	r21, r1
 5b0:	79 f1       	breq	.+94     	; 0x610 <DIO_getPinValue+0xc2>
 5b2:	8d 81       	ldd	r24, Y+5	; 0x05
 5b4:	9e 81       	ldd	r25, Y+6	; 0x06
 5b6:	83 30       	cpi	r24, 0x03	; 3
 5b8:	91 05       	cpc	r25, r1
 5ba:	09 f4       	brne	.+2      	; 0x5be <DIO_getPinValue+0x70>
 5bc:	3d c0       	rjmp	.+122    	; 0x638 <DIO_getPinValue+0xea>
 5be:	4f c0       	rjmp	.+158    	; 0x65e <DIO_getPinValue+0x110>
		{
			case DIO_PORTA:
			*PinValue = GET_BIT(PINA,PinId);
 5c0:	e9 e3       	ldi	r30, 0x39	; 57
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a9 01       	movw	r20, r18
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_getPinValue+0x8a>
 5d4:	55 95       	asr	r21
 5d6:	47 95       	ror	r20
 5d8:	8a 95       	dec	r24
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_getPinValue+0x86>
 5dc:	ca 01       	movw	r24, r20
 5de:	81 70       	andi	r24, 0x01	; 1
 5e0:	eb 81       	ldd	r30, Y+3	; 0x03
 5e2:	fc 81       	ldd	r31, Y+4	; 0x04
 5e4:	80 83       	st	Z, r24
 5e6:	3b c0       	rjmp	.+118    	; 0x65e <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTB:
			*PinValue = GET_BIT(PINB,PinId);
 5e8:	e6 e3       	ldi	r30, 0x36	; 54
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	a9 01       	movw	r20, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_getPinValue+0xb2>
 5fc:	55 95       	asr	r21
 5fe:	47 95       	ror	r20
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_getPinValue+0xae>
 604:	ca 01       	movw	r24, r20
 606:	81 70       	andi	r24, 0x01	; 1
 608:	eb 81       	ldd	r30, Y+3	; 0x03
 60a:	fc 81       	ldd	r31, Y+4	; 0x04
 60c:	80 83       	st	Z, r24
 60e:	27 c0       	rjmp	.+78     	; 0x65e <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTC:
			*PinValue = GET_BIT(PINC,PinId);
 610:	e3 e3       	ldi	r30, 0x33	; 51
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	8a 81       	ldd	r24, Y+2	; 0x02
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a9 01       	movw	r20, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_getPinValue+0xda>
 624:	55 95       	asr	r21
 626:	47 95       	ror	r20
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_getPinValue+0xd6>
 62c:	ca 01       	movw	r24, r20
 62e:	81 70       	andi	r24, 0x01	; 1
 630:	eb 81       	ldd	r30, Y+3	; 0x03
 632:	fc 81       	ldd	r31, Y+4	; 0x04
 634:	80 83       	st	Z, r24
 636:	13 c0       	rjmp	.+38     	; 0x65e <DIO_getPinValue+0x110>
			break;
			
			case DIO_PORTD:
			*PinValue = GET_BIT(PIND,PinId);
 638:	e0 e3       	ldi	r30, 0x30	; 48
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	a9 01       	movw	r20, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_getPinValue+0x102>
 64c:	55 95       	asr	r21
 64e:	47 95       	ror	r20
 650:	8a 95       	dec	r24
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_getPinValue+0xfe>
 654:	ca 01       	movw	r24, r20
 656:	81 70       	andi	r24, 0x01	; 1
 658:	eb 81       	ldd	r30, Y+3	; 0x03
 65a:	fc 81       	ldd	r31, Y+4	; 0x04
 65c:	80 83       	st	Z, r24
	}
	else
	{
		// DO Nothing
	}
}
 65e:	26 96       	adiw	r28, 0x06	; 6
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
 66a:	cf 91       	pop	r28
 66c:	df 91       	pop	r29
 66e:	08 95       	ret

00000670 <DIO_activePinInPullUpResistance>:


void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
 670:	df 93       	push	r29
 672:	cf 93       	push	r28
 674:	00 d0       	rcall	.+0      	; 0x676 <DIO_activePinInPullUpResistance+0x6>
 676:	00 d0       	rcall	.+0      	; 0x678 <DIO_activePinInPullUpResistance+0x8>
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PinId<=7))
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	84 30       	cpi	r24, 0x04	; 4
 684:	08 f0       	brcs	.+2      	; 0x688 <DIO_activePinInPullUpResistance+0x18>
 686:	72 c0       	rjmp	.+228    	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	88 30       	cpi	r24, 0x08	; 8
 68c:	08 f0       	brcs	.+2      	; 0x690 <DIO_activePinInPullUpResistance+0x20>
 68e:	6e c0       	rjmp	.+220    	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
	{
		switch(PortId)
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	3c 83       	std	Y+4, r19	; 0x04
 698:	2b 83       	std	Y+3, r18	; 0x03
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	91 05       	cpc	r25, r1
 6a2:	49 f1       	breq	.+82     	; 0x6f6 <DIO_activePinInPullUpResistance+0x86>
 6a4:	2b 81       	ldd	r18, Y+3	; 0x03
 6a6:	3c 81       	ldd	r19, Y+4	; 0x04
 6a8:	22 30       	cpi	r18, 0x02	; 2
 6aa:	31 05       	cpc	r19, r1
 6ac:	2c f4       	brge	.+10     	; 0x6b8 <DIO_activePinInPullUpResistance+0x48>
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	61 f0       	breq	.+24     	; 0x6ce <DIO_activePinInPullUpResistance+0x5e>
 6b6:	5a c0       	rjmp	.+180    	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
 6b8:	2b 81       	ldd	r18, Y+3	; 0x03
 6ba:	3c 81       	ldd	r19, Y+4	; 0x04
 6bc:	22 30       	cpi	r18, 0x02	; 2
 6be:	31 05       	cpc	r19, r1
 6c0:	71 f1       	breq	.+92     	; 0x71e <DIO_activePinInPullUpResistance+0xae>
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	9c 81       	ldd	r25, Y+4	; 0x04
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	91 05       	cpc	r25, r1
 6ca:	e9 f1       	breq	.+122    	; 0x746 <DIO_activePinInPullUpResistance+0xd6>
 6cc:	4f c0       	rjmp	.+158    	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
			SET_BIT(PORTA,PinId);
 6ce:	ab e3       	ldi	r26, 0x3B	; 59
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	eb e3       	ldi	r30, 0x3B	; 59
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	48 2f       	mov	r20, r24
 6da:	8a 81       	ldd	r24, Y+2	; 0x02
 6dc:	28 2f       	mov	r18, r24
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 2e       	mov	r0, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_activePinInPullUpResistance+0x7c>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	0a 94       	dec	r0
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_activePinInPullUpResistance+0x78>
 6f0:	84 2b       	or	r24, r20
 6f2:	8c 93       	st	X, r24
 6f4:	3b c0       	rjmp	.+118    	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTB:
			SET_BIT(PORTB,PinId);
 6f6:	a8 e3       	ldi	r26, 0x38	; 56
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	e8 e3       	ldi	r30, 0x38	; 56
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	48 2f       	mov	r20, r24
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	28 2f       	mov	r18, r24
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 2e       	mov	r0, r18
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_activePinInPullUpResistance+0xa4>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_activePinInPullUpResistance+0xa0>
 718:	84 2b       	or	r24, r20
 71a:	8c 93       	st	X, r24
 71c:	27 c0       	rjmp	.+78     	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTC:
			SET_BIT(PORTC,PinId);
 71e:	a5 e3       	ldi	r26, 0x35	; 53
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e5 e3       	ldi	r30, 0x35	; 53
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	48 2f       	mov	r20, r24
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 2e       	mov	r0, r18
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_activePinInPullUpResistance+0xcc>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	0a 94       	dec	r0
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_activePinInPullUpResistance+0xc8>
 740:	84 2b       	or	r24, r20
 742:	8c 93       	st	X, r24
 744:	13 c0       	rjmp	.+38     	; 0x76c <DIO_activePinInPullUpResistance+0xfc>
			break;
			
			case DIO_PORTD:
			SET_BIT(PORTD,PinId);
 746:	a2 e3       	ldi	r26, 0x32	; 50
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e2 e3       	ldi	r30, 0x32	; 50
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	48 2f       	mov	r20, r24
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 2e       	mov	r0, r18
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_activePinInPullUpResistance+0xf4>
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	0a 94       	dec	r0
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_activePinInPullUpResistance+0xf0>
 768:	84 2b       	or	r24, r20
 76a:	8c 93       	st	X, r24
	}
	else
	{
		// DO Nothing
	}
}
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	cf 91       	pop	r28
 776:	df 91       	pop	r29
 778:	08 95       	ret

0000077a <DIO_setPortDirection>:



/* Port Apis */
void DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
 77a:	df 93       	push	r29
 77c:	cf 93       	push	r28
 77e:	00 d0       	rcall	.+0      	; 0x780 <DIO_setPortDirection+0x6>
 780:	00 d0       	rcall	.+0      	; 0x782 <DIO_setPortDirection+0x8>
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	89 83       	std	Y+1, r24	; 0x01
 788:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && ((DIO_PORT_OUTPUT == PortDirection) || (DIO_PORT_INPUT == PortDirection)))
 78a:	89 81       	ldd	r24, Y+1	; 0x01
 78c:	84 30       	cpi	r24, 0x04	; 4
 78e:	08 f0       	brcs	.+2      	; 0x792 <DIO_setPortDirection+0x18>
 790:	55 c0       	rjmp	.+170    	; 0x83c <DIO_setPortDirection+0xc2>
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	8f 3f       	cpi	r24, 0xFF	; 255
 796:	21 f0       	breq	.+8      	; 0x7a0 <DIO_setPortDirection+0x26>
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	88 23       	and	r24, r24
 79c:	09 f0       	breq	.+2      	; 0x7a0 <DIO_setPortDirection+0x26>
 79e:	4e c0       	rjmp	.+156    	; 0x83c <DIO_setPortDirection+0xc2>
	{
		switch(PortId)
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	3c 83       	std	Y+4, r19	; 0x04
 7a8:	2b 83       	std	Y+3, r18	; 0x03
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	9c 81       	ldd	r25, Y+4	; 0x04
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	91 05       	cpc	r25, r1
 7b2:	09 f1       	breq	.+66     	; 0x7f6 <DIO_setPortDirection+0x7c>
 7b4:	2b 81       	ldd	r18, Y+3	; 0x03
 7b6:	3c 81       	ldd	r19, Y+4	; 0x04
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	31 05       	cpc	r19, r1
 7bc:	2c f4       	brge	.+10     	; 0x7c8 <DIO_setPortDirection+0x4e>
 7be:	8b 81       	ldd	r24, Y+3	; 0x03
 7c0:	9c 81       	ldd	r25, Y+4	; 0x04
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	61 f0       	breq	.+24     	; 0x7de <DIO_setPortDirection+0x64>
 7c6:	3a c0       	rjmp	.+116    	; 0x83c <DIO_setPortDirection+0xc2>
 7c8:	2b 81       	ldd	r18, Y+3	; 0x03
 7ca:	3c 81       	ldd	r19, Y+4	; 0x04
 7cc:	22 30       	cpi	r18, 0x02	; 2
 7ce:	31 05       	cpc	r19, r1
 7d0:	f1 f0       	breq	.+60     	; 0x80e <DIO_setPortDirection+0x94>
 7d2:	8b 81       	ldd	r24, Y+3	; 0x03
 7d4:	9c 81       	ldd	r25, Y+4	; 0x04
 7d6:	83 30       	cpi	r24, 0x03	; 3
 7d8:	91 05       	cpc	r25, r1
 7da:	29 f1       	breq	.+74     	; 0x826 <DIO_setPortDirection+0xac>
 7dc:	2f c0       	rjmp	.+94     	; 0x83c <DIO_setPortDirection+0xc2>
		{
		case 0:
			if(DIO_PORT_OUTPUT == PortDirection)
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	8f 3f       	cpi	r24, 0xFF	; 255
 7e2:	29 f4       	brne	.+10     	; 0x7ee <DIO_setPortDirection+0x74>
			{
				DDRA = 0xff;
 7e4:	ea e3       	ldi	r30, 0x3A	; 58
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
 7ea:	80 83       	st	Z, r24
 7ec:	27 c0       	rjmp	.+78     	; 0x83c <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00;
 7ee:	ea e3       	ldi	r30, 0x3A	; 58
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	10 82       	st	Z, r1
 7f4:	23 c0       	rjmp	.+70     	; 0x83c <DIO_setPortDirection+0xc2>
			}
			break;

		case 1:
			if(DIO_PORT_OUTPUT == PortDirection)
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	8f 3f       	cpi	r24, 0xFF	; 255
 7fa:	29 f4       	brne	.+10     	; 0x806 <DIO_setPortDirection+0x8c>
			{
				DDRB = 0xff;
 7fc:	e7 e3       	ldi	r30, 0x37	; 55
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	80 83       	st	Z, r24
 804:	1b c0       	rjmp	.+54     	; 0x83c <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00;
 806:	e7 e3       	ldi	r30, 0x37	; 55
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	10 82       	st	Z, r1
 80c:	17 c0       	rjmp	.+46     	; 0x83c <DIO_setPortDirection+0xc2>
			}
			break;

		case 2:
			if(DIO_PORT_OUTPUT == PortDirection)
 80e:	8a 81       	ldd	r24, Y+2	; 0x02
 810:	8f 3f       	cpi	r24, 0xFF	; 255
 812:	29 f4       	brne	.+10     	; 0x81e <DIO_setPortDirection+0xa4>
			{
				DDRC = 0xff;
 814:	e4 e3       	ldi	r30, 0x34	; 52
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	80 83       	st	Z, r24
 81c:	0f c0       	rjmp	.+30     	; 0x83c <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00;
 81e:	e4 e3       	ldi	r30, 0x34	; 52
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	10 82       	st	Z, r1
 824:	0b c0       	rjmp	.+22     	; 0x83c <DIO_setPortDirection+0xc2>
			}
			break;

		case 3:
			if(DIO_PORT_OUTPUT == PortDirection)
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	8f 3f       	cpi	r24, 0xFF	; 255
 82a:	29 f4       	brne	.+10     	; 0x836 <DIO_setPortDirection+0xbc>
			{
				DDRD = 0xff;
 82c:	e1 e3       	ldi	r30, 0x31	; 49
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	80 83       	st	Z, r24
 834:	03 c0       	rjmp	.+6      	; 0x83c <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00;
 836:	e1 e3       	ldi	r30, 0x31	; 49
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	10 82       	st	Z, r1
			}
			break;
		}
	}
}
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	cf 91       	pop	r28
 846:	df 91       	pop	r29
 848:	08 95       	ret

0000084a <DIO_setPortValue>:


void DIO_setPortValue(u8 PortId, u8 PortValue)
{
 84a:	df 93       	push	r29
 84c:	cf 93       	push	r28
 84e:	00 d0       	rcall	.+0      	; 0x850 <DIO_setPortValue+0x6>
 850:	00 d0       	rcall	.+0      	; 0x852 <DIO_setPortValue+0x8>
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	89 83       	std	Y+1, r24	; 0x01
 858:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId<=3)
 85a:	89 81       	ldd	r24, Y+1	; 0x01
 85c:	84 30       	cpi	r24, 0x04	; 4
 85e:	90 f5       	brcc	.+100    	; 0x8c4 <__stack+0x65>
	{
		switch(PortId)
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	28 2f       	mov	r18, r24
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	3c 83       	std	Y+4, r19	; 0x04
 868:	2b 83       	std	Y+3, r18	; 0x03
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
 86c:	9c 81       	ldd	r25, Y+4	; 0x04
 86e:	81 30       	cpi	r24, 0x01	; 1
 870:	91 05       	cpc	r25, r1
 872:	d1 f0       	breq	.+52     	; 0x8a8 <__stack+0x49>
 874:	2b 81       	ldd	r18, Y+3	; 0x03
 876:	3c 81       	ldd	r19, Y+4	; 0x04
 878:	22 30       	cpi	r18, 0x02	; 2
 87a:	31 05       	cpc	r19, r1
 87c:	2c f4       	brge	.+10     	; 0x888 <__stack+0x29>
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	9c 81       	ldd	r25, Y+4	; 0x04
 882:	00 97       	sbiw	r24, 0x00	; 0
 884:	61 f0       	breq	.+24     	; 0x89e <__stack+0x3f>
 886:	1e c0       	rjmp	.+60     	; 0x8c4 <__stack+0x65>
 888:	2b 81       	ldd	r18, Y+3	; 0x03
 88a:	3c 81       	ldd	r19, Y+4	; 0x04
 88c:	22 30       	cpi	r18, 0x02	; 2
 88e:	31 05       	cpc	r19, r1
 890:	81 f0       	breq	.+32     	; 0x8b2 <__stack+0x53>
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	9c 81       	ldd	r25, Y+4	; 0x04
 896:	83 30       	cpi	r24, 0x03	; 3
 898:	91 05       	cpc	r25, r1
 89a:	81 f0       	breq	.+32     	; 0x8bc <__stack+0x5d>
 89c:	13 c0       	rjmp	.+38     	; 0x8c4 <__stack+0x65>
		{
		case 0:
			PORTA = PortValue;
 89e:	eb e3       	ldi	r30, 0x3B	; 59
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	8a 81       	ldd	r24, Y+2	; 0x02
 8a4:	80 83       	st	Z, r24
 8a6:	0e c0       	rjmp	.+28     	; 0x8c4 <__stack+0x65>
			break;

		case 1:
			PORTB = PortValue;
 8a8:	e8 e3       	ldi	r30, 0x38	; 56
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	8a 81       	ldd	r24, Y+2	; 0x02
 8ae:	80 83       	st	Z, r24
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__stack+0x65>
			break;

		case 2:
			PORTC = PortValue;
 8b2:	e5 e3       	ldi	r30, 0x35	; 53
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	8a 81       	ldd	r24, Y+2	; 0x02
 8b8:	80 83       	st	Z, r24
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
			break;

		case 3:
			PORTD = PortValue;
 8bc:	e2 e3       	ldi	r30, 0x32	; 50
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	8a 81       	ldd	r24, Y+2	; 0x02
 8c2:	80 83       	st	Z, r24
			break;
		}
	}
}
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	cf 91       	pop	r28
 8ce:	df 91       	pop	r29
 8d0:	08 95       	ret

000008d2 <DIO_getPortValue>:


void DIO_getPortValue(u8 PortId, u8* PortValue)
{
 8d2:	df 93       	push	r29
 8d4:	cf 93       	push	r28
 8d6:	00 d0       	rcall	.+0      	; 0x8d8 <DIO_getPortValue+0x6>
 8d8:	00 d0       	rcall	.+0      	; 0x8da <DIO_getPortValue+0x8>
 8da:	0f 92       	push	r0
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	89 83       	std	Y+1, r24	; 0x01
 8e2:	7b 83       	std	Y+3, r23	; 0x03
 8e4:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PortValue != 0))
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
 8e8:	84 30       	cpi	r24, 0x04	; 4
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <DIO_getPortValue+0x1c>
 8ec:	3e c0       	rjmp	.+124    	; 0x96a <DIO_getPortValue+0x98>
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	9b 81       	ldd	r25, Y+3	; 0x03
 8f2:	00 97       	sbiw	r24, 0x00	; 0
 8f4:	d1 f1       	breq	.+116    	; 0x96a <DIO_getPortValue+0x98>
	{
		switch(PortId)
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	28 2f       	mov	r18, r24
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	3d 83       	std	Y+5, r19	; 0x05
 8fe:	2c 83       	std	Y+4, r18	; 0x04
 900:	8c 81       	ldd	r24, Y+4	; 0x04
 902:	9d 81       	ldd	r25, Y+5	; 0x05
 904:	81 30       	cpi	r24, 0x01	; 1
 906:	91 05       	cpc	r25, r1
 908:	e1 f0       	breq	.+56     	; 0x942 <DIO_getPortValue+0x70>
 90a:	2c 81       	ldd	r18, Y+4	; 0x04
 90c:	3d 81       	ldd	r19, Y+5	; 0x05
 90e:	22 30       	cpi	r18, 0x02	; 2
 910:	31 05       	cpc	r19, r1
 912:	2c f4       	brge	.+10     	; 0x91e <DIO_getPortValue+0x4c>
 914:	8c 81       	ldd	r24, Y+4	; 0x04
 916:	9d 81       	ldd	r25, Y+5	; 0x05
 918:	00 97       	sbiw	r24, 0x00	; 0
 91a:	61 f0       	breq	.+24     	; 0x934 <DIO_getPortValue+0x62>
 91c:	26 c0       	rjmp	.+76     	; 0x96a <DIO_getPortValue+0x98>
 91e:	2c 81       	ldd	r18, Y+4	; 0x04
 920:	3d 81       	ldd	r19, Y+5	; 0x05
 922:	22 30       	cpi	r18, 0x02	; 2
 924:	31 05       	cpc	r19, r1
 926:	a1 f0       	breq	.+40     	; 0x950 <DIO_getPortValue+0x7e>
 928:	8c 81       	ldd	r24, Y+4	; 0x04
 92a:	9d 81       	ldd	r25, Y+5	; 0x05
 92c:	83 30       	cpi	r24, 0x03	; 3
 92e:	91 05       	cpc	r25, r1
 930:	b1 f0       	breq	.+44     	; 0x95e <DIO_getPortValue+0x8c>
 932:	1b c0       	rjmp	.+54     	; 0x96a <DIO_getPortValue+0x98>
		{
		case 0:
			*PortValue = PINA;
 934:	e9 e3       	ldi	r30, 0x39	; 57
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	ea 81       	ldd	r30, Y+2	; 0x02
 93c:	fb 81       	ldd	r31, Y+3	; 0x03
 93e:	80 83       	st	Z, r24
 940:	14 c0       	rjmp	.+40     	; 0x96a <DIO_getPortValue+0x98>
			break;

		case 1:
			*PortValue = PINB;
 942:	e6 e3       	ldi	r30, 0x36	; 54
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	80 81       	ld	r24, Z
 948:	ea 81       	ldd	r30, Y+2	; 0x02
 94a:	fb 81       	ldd	r31, Y+3	; 0x03
 94c:	80 83       	st	Z, r24
 94e:	0d c0       	rjmp	.+26     	; 0x96a <DIO_getPortValue+0x98>
			break;

		case 2:
			*PortValue = PINC;
 950:	e3 e3       	ldi	r30, 0x33	; 51
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	ea 81       	ldd	r30, Y+2	; 0x02
 958:	fb 81       	ldd	r31, Y+3	; 0x03
 95a:	80 83       	st	Z, r24
 95c:	06 c0       	rjmp	.+12     	; 0x96a <DIO_getPortValue+0x98>
			break;

		case 3:
			*PortValue = PIND;
 95e:	e0 e3       	ldi	r30, 0x30	; 48
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	ea 81       	ldd	r30, Y+2	; 0x02
 966:	fb 81       	ldd	r31, Y+3	; 0x03
 968:	80 83       	st	Z, r24
			break;
		}
	}
}
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	0f 90       	pop	r0
 972:	0f 90       	pop	r0
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	08 95       	ret

0000097a <DIO_togglePortValue>:


void DIO_togglePortValue(u8 PortId)
{
 97a:	df 93       	push	r29
 97c:	cf 93       	push	r28
 97e:	00 d0       	rcall	.+0      	; 0x980 <DIO_togglePortValue+0x6>
 980:	0f 92       	push	r0
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
 988:	89 81       	ldd	r24, Y+1	; 0x01
 98a:	84 30       	cpi	r24, 0x04	; 4
 98c:	08 f0       	brcs	.+2      	; 0x990 <DIO_togglePortValue+0x16>
 98e:	3e c0       	rjmp	.+124    	; 0xa0c <DIO_togglePortValue+0x92>
	{
		switch(PortId)
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	28 2f       	mov	r18, r24
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	3b 83       	std	Y+3, r19	; 0x03
 998:	2a 83       	std	Y+2, r18	; 0x02
 99a:	8a 81       	ldd	r24, Y+2	; 0x02
 99c:	9b 81       	ldd	r25, Y+3	; 0x03
 99e:	81 30       	cpi	r24, 0x01	; 1
 9a0:	91 05       	cpc	r25, r1
 9a2:	e9 f0       	breq	.+58     	; 0x9de <DIO_togglePortValue+0x64>
 9a4:	2a 81       	ldd	r18, Y+2	; 0x02
 9a6:	3b 81       	ldd	r19, Y+3	; 0x03
 9a8:	22 30       	cpi	r18, 0x02	; 2
 9aa:	31 05       	cpc	r19, r1
 9ac:	2c f4       	brge	.+10     	; 0x9b8 <DIO_togglePortValue+0x3e>
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	9b 81       	ldd	r25, Y+3	; 0x03
 9b2:	00 97       	sbiw	r24, 0x00	; 0
 9b4:	61 f0       	breq	.+24     	; 0x9ce <DIO_togglePortValue+0x54>
 9b6:	2a c0       	rjmp	.+84     	; 0xa0c <DIO_togglePortValue+0x92>
 9b8:	2a 81       	ldd	r18, Y+2	; 0x02
 9ba:	3b 81       	ldd	r19, Y+3	; 0x03
 9bc:	22 30       	cpi	r18, 0x02	; 2
 9be:	31 05       	cpc	r19, r1
 9c0:	b1 f0       	breq	.+44     	; 0x9ee <DIO_togglePortValue+0x74>
 9c2:	8a 81       	ldd	r24, Y+2	; 0x02
 9c4:	9b 81       	ldd	r25, Y+3	; 0x03
 9c6:	83 30       	cpi	r24, 0x03	; 3
 9c8:	91 05       	cpc	r25, r1
 9ca:	c9 f0       	breq	.+50     	; 0x9fe <DIO_togglePortValue+0x84>
 9cc:	1f c0       	rjmp	.+62     	; 0xa0c <DIO_togglePortValue+0x92>
		{
		case 0:
			PORTA = ~PORTA;
 9ce:	ab e3       	ldi	r26, 0x3B	; 59
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	eb e3       	ldi	r30, 0x3B	; 59
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	80 95       	com	r24
 9da:	8c 93       	st	X, r24
 9dc:	17 c0       	rjmp	.+46     	; 0xa0c <DIO_togglePortValue+0x92>
			break;

		case 1:
			PORTB = ~PORTB;
 9de:	a8 e3       	ldi	r26, 0x38	; 56
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	e8 e3       	ldi	r30, 0x38	; 56
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	80 95       	com	r24
 9ea:	8c 93       	st	X, r24
 9ec:	0f c0       	rjmp	.+30     	; 0xa0c <DIO_togglePortValue+0x92>
			break;

		case 2:
			PORTC = ~PORTC;
 9ee:	a5 e3       	ldi	r26, 0x35	; 53
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	e5 e3       	ldi	r30, 0x35	; 53
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	80 95       	com	r24
 9fa:	8c 93       	st	X, r24
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <DIO_togglePortValue+0x92>
			break;

		case 3:
			PORTD = ~PORTD;
 9fe:	a2 e3       	ldi	r26, 0x32	; 50
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e2 e3       	ldi	r30, 0x32	; 50
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	80 95       	com	r24
 a0a:	8c 93       	st	X, r24
			break;
		}
	}
}
 a0c:	0f 90       	pop	r0
 a0e:	0f 90       	pop	r0
 a10:	0f 90       	pop	r0
 a12:	cf 91       	pop	r28
 a14:	df 91       	pop	r29
 a16:	08 95       	ret

00000a18 <DIO_activePortInPullUpResistance>:


void DIO_activePortInPullUpResistance(u8 PortId)
{
 a18:	df 93       	push	r29
 a1a:	cf 93       	push	r28
 a1c:	00 d0       	rcall	.+0      	; 0xa1e <DIO_activePortInPullUpResistance+0x6>
 a1e:	0f 92       	push	r0
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
 a26:	89 81       	ldd	r24, Y+1	; 0x01
 a28:	84 30       	cpi	r24, 0x04	; 4
 a2a:	90 f5       	brcc	.+100    	; 0xa90 <DIO_activePortInPullUpResistance+0x78>
	{
		switch(PortId)
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
 a2e:	28 2f       	mov	r18, r24
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	3b 83       	std	Y+3, r19	; 0x03
 a34:	2a 83       	std	Y+2, r18	; 0x02
 a36:	8a 81       	ldd	r24, Y+2	; 0x02
 a38:	9b 81       	ldd	r25, Y+3	; 0x03
 a3a:	81 30       	cpi	r24, 0x01	; 1
 a3c:	91 05       	cpc	r25, r1
 a3e:	d1 f0       	breq	.+52     	; 0xa74 <DIO_activePortInPullUpResistance+0x5c>
 a40:	2a 81       	ldd	r18, Y+2	; 0x02
 a42:	3b 81       	ldd	r19, Y+3	; 0x03
 a44:	22 30       	cpi	r18, 0x02	; 2
 a46:	31 05       	cpc	r19, r1
 a48:	2c f4       	brge	.+10     	; 0xa54 <DIO_activePortInPullUpResistance+0x3c>
 a4a:	8a 81       	ldd	r24, Y+2	; 0x02
 a4c:	9b 81       	ldd	r25, Y+3	; 0x03
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	61 f0       	breq	.+24     	; 0xa6a <DIO_activePortInPullUpResistance+0x52>
 a52:	1e c0       	rjmp	.+60     	; 0xa90 <DIO_activePortInPullUpResistance+0x78>
 a54:	2a 81       	ldd	r18, Y+2	; 0x02
 a56:	3b 81       	ldd	r19, Y+3	; 0x03
 a58:	22 30       	cpi	r18, 0x02	; 2
 a5a:	31 05       	cpc	r19, r1
 a5c:	81 f0       	breq	.+32     	; 0xa7e <DIO_activePortInPullUpResistance+0x66>
 a5e:	8a 81       	ldd	r24, Y+2	; 0x02
 a60:	9b 81       	ldd	r25, Y+3	; 0x03
 a62:	83 30       	cpi	r24, 0x03	; 3
 a64:	91 05       	cpc	r25, r1
 a66:	81 f0       	breq	.+32     	; 0xa88 <DIO_activePortInPullUpResistance+0x70>
 a68:	13 c0       	rjmp	.+38     	; 0xa90 <DIO_activePortInPullUpResistance+0x78>
		{
		case 0:
			PORTA = 0xff;
 a6a:	eb e3       	ldi	r30, 0x3B	; 59
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	80 83       	st	Z, r24
 a72:	0e c0       	rjmp	.+28     	; 0xa90 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 1:
			PORTB = 0xff;
 a74:	e8 e3       	ldi	r30, 0x38	; 56
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	8f ef       	ldi	r24, 0xFF	; 255
 a7a:	80 83       	st	Z, r24
 a7c:	09 c0       	rjmp	.+18     	; 0xa90 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 2:
			PORTC = 0xff;
 a7e:	e5 e3       	ldi	r30, 0x35	; 53
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	80 83       	st	Z, r24
 a86:	04 c0       	rjmp	.+8      	; 0xa90 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 3:
			PORTD = 0xff;
 a88:	e2 e3       	ldi	r30, 0x32	; 50
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	80 83       	st	Z, r24
			break;
		}
	}
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	0f 90       	pop	r0
 a96:	cf 91       	pop	r28
 a98:	df 91       	pop	r29
 a9a:	08 95       	ret

00000a9c <GI_enable>:
#include "GI_interface.h"
#include "GI_private.h"


void GI_enable(void)
{
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
 aa4:	af e5       	ldi	r26, 0x5F	; 95
 aa6:	b0 e0       	ldi	r27, 0x00	; 0
 aa8:	ef e5       	ldi	r30, 0x5F	; 95
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	80 81       	ld	r24, Z
 aae:	80 68       	ori	r24, 0x80	; 128
 ab0:	8c 93       	st	X, r24
}
 ab2:	cf 91       	pop	r28
 ab4:	df 91       	pop	r29
 ab6:	08 95       	ret

00000ab8 <GI_disable>:


void GI_disable(void)
{
 ab8:	df 93       	push	r29
 aba:	cf 93       	push	r28
 abc:	cd b7       	in	r28, 0x3d	; 61
 abe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
 ac0:	af e5       	ldi	r26, 0x5F	; 95
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	ef e5       	ldi	r30, 0x5F	; 95
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	8f 77       	andi	r24, 0x7F	; 127
 acc:	8c 93       	st	X, r24
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <TMR0_init>:
static void (*private_pCallBackOVF)(void)=NULL;
static void (*private_pCallBackCTC)(void)=NULL;
volatile static u16 private_ctcCounter;

void TMR0_init(void)
{
 ad4:	df 93       	push	r29
 ad6:	cf 93       	push	r28
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
	// Enable OC Interrupt
	SET_BIT(TIMSK,OCIE0);

#elif TMR0_MODE == TMR0_FAST_PWM_MODE
	// Select Mode = FAST PWM Mode
	SET_BIT(TCCR0,WGM00);
 adc:	a3 e5       	ldi	r26, 0x53	; 83
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	e3 e5       	ldi	r30, 0x53	; 83
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	80 64       	ori	r24, 0x40	; 64
 ae8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);	
 aea:	a3 e5       	ldi	r26, 0x53	; 83
 aec:	b0 e0       	ldi	r27, 0x00	; 0
 aee:	e3 e5       	ldi	r30, 0x53	; 83
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	80 81       	ld	r24, Z
 af4:	88 60       	ori	r24, 0x08	; 8
 af6:	8c 93       	st	X, r24
	
	// Select Non Inverting Mode
	CLR_BIT(TCCR0,COM00);
 af8:	a3 e5       	ldi	r26, 0x53	; 83
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	e3 e5       	ldi	r30, 0x53	; 83
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	8f 7e       	andi	r24, 0xEF	; 239
 b04:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
 b06:	a3 e5       	ldi	r26, 0x53	; 83
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	e3 e5       	ldi	r30, 0x53	; 83
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	80 81       	ld	r24, Z
 b10:	80 62       	ori	r24, 0x20	; 32
 b12:	8c 93       	st	X, r24
#endif
}
 b14:	cf 91       	pop	r28
 b16:	df 91       	pop	r29
 b18:	08 95       	ret

00000b1a <TMR0_start>:


void TMR0_start(void)
{
 b1a:	df 93       	push	r29
 b1c:	cf 93       	push	r28
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
	// Select Prescaler Value = 64
	SET_BIT(TCCR0,CS00);
 b22:	a3 e5       	ldi	r26, 0x53	; 83
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	e3 e5       	ldi	r30, 0x53	; 83
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
 b2c:	81 60       	ori	r24, 0x01	; 1
 b2e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
 b30:	a3 e5       	ldi	r26, 0x53	; 83
 b32:	b0 e0       	ldi	r27, 0x00	; 0
 b34:	e3 e5       	ldi	r30, 0x53	; 83
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	82 60       	ori	r24, 0x02	; 2
 b3c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
 b3e:	a3 e5       	ldi	r26, 0x53	; 83
 b40:	b0 e0       	ldi	r27, 0x00	; 0
 b42:	e3 e5       	ldi	r30, 0x53	; 83
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	8b 7f       	andi	r24, 0xFB	; 251
 b4a:	8c 93       	st	X, r24
}
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <TMR0_stop>:


void TMR0_stop(void)
{
 b52:	df 93       	push	r29
 b54:	cf 93       	push	r28
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62
	// Select Prescaler Value = 0
	CLR_BIT(TCCR0,CS00);
 b5a:	a3 e5       	ldi	r26, 0x53	; 83
 b5c:	b0 e0       	ldi	r27, 0x00	; 0
 b5e:	e3 e5       	ldi	r30, 0x53	; 83
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	8e 7f       	andi	r24, 0xFE	; 254
 b66:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS01);
 b68:	a3 e5       	ldi	r26, 0x53	; 83
 b6a:	b0 e0       	ldi	r27, 0x00	; 0
 b6c:	e3 e5       	ldi	r30, 0x53	; 83
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	80 81       	ld	r24, Z
 b72:	8d 7f       	andi	r24, 0xFD	; 253
 b74:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS02);
 b76:	a3 e5       	ldi	r26, 0x53	; 83
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	e3 e5       	ldi	r30, 0x53	; 83
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	8b 7f       	andi	r24, 0xFB	; 251
 b82:	8c 93       	st	X, r24
}
 b84:	cf 91       	pop	r28
 b86:	df 91       	pop	r29
 b88:	08 95       	ret

00000b8a <TMR0_setCompareMatchValue>:


void TMR0_setCompareMatchValue(u8 compareValue)
{
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	0f 92       	push	r0
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
 b94:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = compareValue;
 b96:	ec e5       	ldi	r30, 0x5C	; 92
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	89 81       	ldd	r24, Y+1	; 0x01
 b9c:	80 83       	st	Z, r24
}
 b9e:	0f 90       	pop	r0
 ba0:	cf 91       	pop	r28
 ba2:	df 91       	pop	r29
 ba4:	08 95       	ret

00000ba6 <TMR0_setDelay_ms_usingCTC>:


void TMR0_setDelay_ms_usingCTC(u16 delay_ms)
{
 ba6:	df 93       	push	r29
 ba8:	cf 93       	push	r28
 baa:	00 d0       	rcall	.+0      	; 0xbac <TMR0_setDelay_ms_usingCTC+0x6>
 bac:	cd b7       	in	r28, 0x3d	; 61
 bae:	de b7       	in	r29, 0x3e	; 62
 bb0:	9a 83       	std	Y+2, r25	; 0x02
 bb2:	89 83       	std	Y+1, r24	; 0x01
	// under condition tick time 4 MS
	OCR0 = 249;
 bb4:	ec e5       	ldi	r30, 0x5C	; 92
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	89 ef       	ldi	r24, 0xF9	; 249
 bba:	80 83       	st	Z, r24
	private_ctcCounter = delay_ms;
 bbc:	89 81       	ldd	r24, Y+1	; 0x01
 bbe:	9a 81       	ldd	r25, Y+2	; 0x02
 bc0:	90 93 69 00 	sts	0x0069, r25
 bc4:	80 93 68 00 	sts	0x0068, r24
}
 bc8:	0f 90       	pop	r0
 bca:	0f 90       	pop	r0
 bcc:	cf 91       	pop	r28
 bce:	df 91       	pop	r29
 bd0:	08 95       	ret

00000bd2 <TMR0_setCallBackOVF>:


void TMR0_setCallBackOVF(void(*ptrToFun)(void))
{
 bd2:	df 93       	push	r29
 bd4:	cf 93       	push	r28
 bd6:	00 d0       	rcall	.+0      	; 0xbd8 <TMR0_setCallBackOVF+0x6>
 bd8:	cd b7       	in	r28, 0x3d	; 61
 bda:	de b7       	in	r29, 0x3e	; 62
 bdc:	9a 83       	std	Y+2, r25	; 0x02
 bde:	89 83       	std	Y+1, r24	; 0x01
	if(ptrToFun!=NULL)
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	9a 81       	ldd	r25, Y+2	; 0x02
 be4:	00 97       	sbiw	r24, 0x00	; 0
 be6:	31 f0       	breq	.+12     	; 0xbf4 <TMR0_setCallBackOVF+0x22>
	{
		private_pCallBackOVF = ptrToFun;
 be8:	89 81       	ldd	r24, Y+1	; 0x01
 bea:	9a 81       	ldd	r25, Y+2	; 0x02
 bec:	90 93 61 00 	sts	0x0061, r25
 bf0:	80 93 60 00 	sts	0x0060, r24
	}
}
 bf4:	0f 90       	pop	r0
 bf6:	0f 90       	pop	r0
 bf8:	cf 91       	pop	r28
 bfa:	df 91       	pop	r29
 bfc:	08 95       	ret

00000bfe <TMR0_setCallBackCTC>:


void TMR0_setCallBackCTC(void(*ptrToFun)(void))
{
 bfe:	df 93       	push	r29
 c00:	cf 93       	push	r28
 c02:	00 d0       	rcall	.+0      	; 0xc04 <TMR0_setCallBackCTC+0x6>
 c04:	cd b7       	in	r28, 0x3d	; 61
 c06:	de b7       	in	r29, 0x3e	; 62
 c08:	9a 83       	std	Y+2, r25	; 0x02
 c0a:	89 83       	std	Y+1, r24	; 0x01
	if(ptrToFun!=NULL)
 c0c:	89 81       	ldd	r24, Y+1	; 0x01
 c0e:	9a 81       	ldd	r25, Y+2	; 0x02
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	31 f0       	breq	.+12     	; 0xc20 <TMR0_setCallBackCTC+0x22>
	{
		private_pCallBackCTC = ptrToFun;
 c14:	89 81       	ldd	r24, Y+1	; 0x01
 c16:	9a 81       	ldd	r25, Y+2	; 0x02
 c18:	90 93 63 00 	sts	0x0063, r25
 c1c:	80 93 62 00 	sts	0x0062, r24
	}
}
 c20:	0f 90       	pop	r0
 c22:	0f 90       	pop	r0
 c24:	cf 91       	pop	r28
 c26:	df 91       	pop	r29
 c28:	08 95       	ret

00000c2a <__vector_11>:


void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)
{
 c2a:	1f 92       	push	r1
 c2c:	0f 92       	push	r0
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	0f 92       	push	r0
 c32:	11 24       	eor	r1, r1
 c34:	2f 93       	push	r18
 c36:	3f 93       	push	r19
 c38:	4f 93       	push	r20
 c3a:	5f 93       	push	r21
 c3c:	6f 93       	push	r22
 c3e:	7f 93       	push	r23
 c40:	8f 93       	push	r24
 c42:	9f 93       	push	r25
 c44:	af 93       	push	r26
 c46:	bf 93       	push	r27
 c48:	ef 93       	push	r30
 c4a:	ff 93       	push	r31
 c4c:	df 93       	push	r29
 c4e:	cf 93       	push	r28
 c50:	cd b7       	in	r28, 0x3d	; 61
 c52:	de b7       	in	r29, 0x3e	; 62
	static u16 OvfCounter = 0;
	OvfCounter++;
 c54:	80 91 64 00 	lds	r24, 0x0064
 c58:	90 91 65 00 	lds	r25, 0x0065
 c5c:	01 96       	adiw	r24, 0x01	; 1
 c5e:	90 93 65 00 	sts	0x0065, r25
 c62:	80 93 64 00 	sts	0x0064, r24
	
	if(TMR0_OVER_FLOW_COUNTER == OvfCounter)
 c66:	80 91 64 00 	lds	r24, 0x0064
 c6a:	90 91 65 00 	lds	r25, 0x0065
 c6e:	23 e0       	ldi	r18, 0x03	; 3
 c70:	81 3d       	cpi	r24, 0xD1	; 209
 c72:	92 07       	cpc	r25, r18
 c74:	99 f4       	brne	.+38     	; 0xc9c <__vector_11+0x72>
	{
		// Set Preload Value
		TCNT0 = TMR0_PRELOAD_VALUE;
 c76:	e2 e5       	ldi	r30, 0x52	; 82
 c78:	f0 e0       	ldi	r31, 0x00	; 0
 c7a:	81 e7       	ldi	r24, 0x71	; 113
 c7c:	80 83       	st	Z, r24
		
		// Clear Counter
		OvfCounter = 0;
 c7e:	10 92 65 00 	sts	0x0065, r1
 c82:	10 92 64 00 	sts	0x0064, r1
		
		//call action
		if(private_pCallBackOVF != NULL)
 c86:	80 91 60 00 	lds	r24, 0x0060
 c8a:	90 91 61 00 	lds	r25, 0x0061
 c8e:	00 97       	sbiw	r24, 0x00	; 0
 c90:	29 f0       	breq	.+10     	; 0xc9c <__vector_11+0x72>
		{
			private_pCallBackOVF();
 c92:	e0 91 60 00 	lds	r30, 0x0060
 c96:	f0 91 61 00 	lds	r31, 0x0061
 c9a:	09 95       	icall
		}
	}
}
 c9c:	cf 91       	pop	r28
 c9e:	df 91       	pop	r29
 ca0:	ff 91       	pop	r31
 ca2:	ef 91       	pop	r30
 ca4:	bf 91       	pop	r27
 ca6:	af 91       	pop	r26
 ca8:	9f 91       	pop	r25
 caa:	8f 91       	pop	r24
 cac:	7f 91       	pop	r23
 cae:	6f 91       	pop	r22
 cb0:	5f 91       	pop	r21
 cb2:	4f 91       	pop	r20
 cb4:	3f 91       	pop	r19
 cb6:	2f 91       	pop	r18
 cb8:	0f 90       	pop	r0
 cba:	0f be       	out	0x3f, r0	; 63
 cbc:	0f 90       	pop	r0
 cbe:	1f 90       	pop	r1
 cc0:	18 95       	reti

00000cc2 <__vector_10>:


void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
 cc2:	1f 92       	push	r1
 cc4:	0f 92       	push	r0
 cc6:	0f b6       	in	r0, 0x3f	; 63
 cc8:	0f 92       	push	r0
 cca:	11 24       	eor	r1, r1
 ccc:	2f 93       	push	r18
 cce:	3f 93       	push	r19
 cd0:	4f 93       	push	r20
 cd2:	5f 93       	push	r21
 cd4:	6f 93       	push	r22
 cd6:	7f 93       	push	r23
 cd8:	8f 93       	push	r24
 cda:	9f 93       	push	r25
 cdc:	af 93       	push	r26
 cde:	bf 93       	push	r27
 ce0:	ef 93       	push	r30
 ce2:	ff 93       	push	r31
 ce4:	df 93       	push	r29
 ce6:	cf 93       	push	r28
 ce8:	cd b7       	in	r28, 0x3d	; 61
 cea:	de b7       	in	r29, 0x3e	; 62
	static u16 ctcCounter = 0;
	ctcCounter++;
 cec:	80 91 66 00 	lds	r24, 0x0066
 cf0:	90 91 67 00 	lds	r25, 0x0067
 cf4:	01 96       	adiw	r24, 0x01	; 1
 cf6:	90 93 67 00 	sts	0x0067, r25
 cfa:	80 93 66 00 	sts	0x0066, r24
	
	if(private_ctcCounter == ctcCounter)
 cfe:	20 91 68 00 	lds	r18, 0x0068
 d02:	30 91 69 00 	lds	r19, 0x0069
 d06:	80 91 66 00 	lds	r24, 0x0066
 d0a:	90 91 67 00 	lds	r25, 0x0067
 d0e:	28 17       	cp	r18, r24
 d10:	39 07       	cpc	r19, r25
 d12:	79 f4       	brne	.+30     	; 0xd32 <__vector_10+0x70>
	{
		// Clear Counter
		ctcCounter = 0;
 d14:	10 92 67 00 	sts	0x0067, r1
 d18:	10 92 66 00 	sts	0x0066, r1
		
		//call action
		if(private_pCallBackCTC != NULL)
 d1c:	80 91 62 00 	lds	r24, 0x0062
 d20:	90 91 63 00 	lds	r25, 0x0063
 d24:	00 97       	sbiw	r24, 0x00	; 0
 d26:	29 f0       	breq	.+10     	; 0xd32 <__vector_10+0x70>
		{
			private_pCallBackCTC();
 d28:	e0 91 62 00 	lds	r30, 0x0062
 d2c:	f0 91 63 00 	lds	r31, 0x0063
 d30:	09 95       	icall
		}
	}
 d32:	cf 91       	pop	r28
 d34:	df 91       	pop	r29
 d36:	ff 91       	pop	r31
 d38:	ef 91       	pop	r30
 d3a:	bf 91       	pop	r27
 d3c:	af 91       	pop	r26
 d3e:	9f 91       	pop	r25
 d40:	8f 91       	pop	r24
 d42:	7f 91       	pop	r23
 d44:	6f 91       	pop	r22
 d46:	5f 91       	pop	r21
 d48:	4f 91       	pop	r20
 d4a:	3f 91       	pop	r19
 d4c:	2f 91       	pop	r18
 d4e:	0f 90       	pop	r0
 d50:	0f be       	out	0x3f, r0	; 63
 d52:	0f 90       	pop	r0
 d54:	1f 90       	pop	r1
 d56:	18 95       	reti

00000d58 <main>:

void action(void);


int main(void)
{
 d58:	df 93       	push	r29
 d5a:	cf 93       	push	r28
 d5c:	cd b7       	in	r28, 0x3d	; 61
 d5e:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT); //LED0>>O/P
 d60:	82 e0       	ldi	r24, 0x02	; 2
 d62:	62 e0       	ldi	r22, 0x02	; 2
 d64:	41 e0       	ldi	r20, 0x01	; 1
 d66:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	GI_enable();
 d6a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <GI_enable>
	TMR0_init();
 d6e:	0e 94 6a 05 	call	0xad4	; 0xad4 <TMR0_init>
	TMR0_setDelay_ms_usingCTC(2000);
 d72:	80 ed       	ldi	r24, 0xD0	; 208
 d74:	97 e0       	ldi	r25, 0x07	; 7
 d76:	0e 94 d3 05 	call	0xba6	; 0xba6 <TMR0_setDelay_ms_usingCTC>
	TMR0_setCallBackCTC(&action);
 d7a:	84 ec       	ldi	r24, 0xC4	; 196
 d7c:	96 e0       	ldi	r25, 0x06	; 6
 d7e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TMR0_setCallBackCTC>
	TMR0_start();
 d82:	0e 94 8d 05 	call	0xb1a	; 0xb1a <TMR0_start>
 d86:	ff cf       	rjmp	.-2      	; 0xd86 <main+0x2e>

00000d88 <action>:
    }
}


void action(void)
{
 d88:	df 93       	push	r29
 d8a:	cf 93       	push	r28
 d8c:	cd b7       	in	r28, 0x3d	; 61
 d8e:	de b7       	in	r29, 0x3e	; 62
	DIO_togglePinValue(DIO_PORTC,DIO_PIN2);
 d90:	82 e0       	ldi	r24, 0x02	; 2
 d92:	62 e0       	ldi	r22, 0x02	; 2
 d94:	0e 94 22 02 	call	0x444	; 0x444 <DIO_togglePinValue>
 d98:	cf 91       	pop	r28
 d9a:	df 91       	pop	r29
 d9c:	08 95       	ret

00000d9e <_exit>:
 d9e:	f8 94       	cli

00000da0 <__stop_program>:
 da0:	ff cf       	rjmp	.-2      	; 0xda0 <__stop_program>
